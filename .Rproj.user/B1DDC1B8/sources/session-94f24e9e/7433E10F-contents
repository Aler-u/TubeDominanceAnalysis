---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse) #Para leer datos y para manipulacion de datos en general
library(readxl) #Los archivos con los datos suelen estar en formato de Excel asi que usamos esta libreria para leerlos
library(bayesrules) #Tiene algunas funciones que nos van a resultar utiles para trabajar con distribuciones conjugadas y graficar

set.seed(1234)
```

La logica basica del test es que dos ratones se encuentran y hay 3 desenlaces posibles para uno de los dos ratones:

* Pierde
* Gana
* Empata (cuando ninguno de los dos se logra sacar del tubo en el tiempo que dura el test)

Si hay 3 desenlaces posibles entonces el proceso puede modelarse como un proceso multinomial. Sin embargo data la estructura de los datos vamos a modelarlo como un proceso binomial ignorando los empates. Despues vamos a volver al modelo multinomial. 

```{r}
dominancia_machos <- read_xlsx('R_TD_M.xlsx')
```

# Preprocesamiento

No tenemos identificadores unicos para cada animal lo cual podemos comprobar facilmente chequeando la columna `id`

```{r}
length(unique(dominancia_machos$id)) - nrow(dominancia_machos)
```

La resta tendria que dar 0 pero justamente lo que ocurre es que tenemos mas filas que numeros de identificacion y siendo que cada fila corresponde a un raton tenemos numeros de identificacion repetidos. Vamos a generar unos nuevos numeros de identificacion dummy.

```{r}
dominancia_machos <- dominancia_machos %>% mutate(dummy_id = 1:n())
```

# Modelo Binomial

Vamos a tomar un raton cualquiera para ejemplificar. 

```{r}
raton_ejemplo <- sample(dominancia_machos$dummy_id, 1)
raton_ejemplo_data <- dominancia_machos %>% filter(dummy_id == raton_ejemplo)
head(raton_ejemplo_data)
```

Para hacer el calculo de la binomial necesitamos la cantidad de exitos (_k_) y la cantidad de intentos (_n_). Lo primero esta dentro de las columnas `d*_wins` donde el `*` depende del numero del dia del testeo. El `n` en cambio esta implicito en la jaula a la que pertenece el animal. Cada raton puede cruzarse con $N_{cage}-1$ ratones. 

Entonces si este raton pertenece a la jaula 6 podemos calcular cuantos ratones tiene esa jaula y restando uno vamos a averiguar la cantidad de intentos `n` que nos interesa. 

```{r}
dominancia_machos %>% count(cage) %>% filter(cage == 6) %>% pull(n)
```

Podemos entonces agregar este numero a nuestro dataset de ejemplo.

```{r}
raton_ejemplo_data <- raton_ejemplo_data %>% mutate(
  cant_intentos = dominancia_machos %>% count(cage) %>% filter(cage == 6) %>% pull(n) - 1
)
```

Con todo esto ya podemos computar lo que nos interesa. Para eso vamos a usar una distribucion conjugada Beta-Binomial. Como prior vamos a usar $Beta(2,2)$ asumiendo entonces que el raton tiene iguales chances de ganar que de perder. Ya tenemos todos los elementos para calcular la distribucion posterior.

```{r}
plot_beta_binomial(
    2, #Prior
    2, #Prior
    y = raton_ejemplo_data %>% pull(d1_wins),
    n = raton_ejemplo_data %>% pull(cant_intentos)
)
summarize_beta_binomial(
   2, #Prior
   2, #Prior
   y = raton_ejemplo_data %>% pull(d1_wins),
   n = raton_ejemplo_data %>% pull(cant_intentos)
)
```

Logramos incorporar adecuadamente la informacion en nuestra distribucion posterior. Vemos entonces que lo mas probable es que este raton en particular no gane en un encuentro con otro raton. De hecho podemos calcular este valor con precision.

```{r}
pbeta(0.5, 2, 6)
```

Tenemos un 93% de chances de que la probabilidad de ganar de este raton este por debajo de 50%. 

Tambien podemos calcular como se informo nuestro intervalo del 95% comparando la distribucion prior con la posterior. 

```{r}
qbeta(c(0.025,0.975), 2, 2)
qbeta(c(0.025,0.975), 2, 6)
```

Ahora bien. Si asumimos que el parametro que gobierna el proceso binomial en este raton fue constante a lo largo de los dias podemos combinar toda esa informacion en lugar de usar los datos de un solo dia como hicimos recien.

Para esto el procedimiento va a ser muy similar. Mantenemos el mismo prior pero ahora vamos a sumar todas las victorias que consiguio al sumar sobre todas las columnas que sean `d*_wins`. Para calcular la cantidad de intentos simplemente multiplicamos el `n` que usamos antes por la cantidad de columnas `d*_wins`. 

```{r}
plot_beta_binomial(
    2, #Prior
    2, #Prior
    y = raton_ejemplo_data %>% summarise(suma = rowSums(across(matches('d\\d_wins')))) %>% pull(suma),
    n = raton_ejemplo_data %>% pull(cant_intentos) * (raton_ejemplo_data %>% select(matches('d\\d_wins')) |> ncol())
)
summarize_beta_binomial(
  2, #Prior
    2, #Prior
    y = raton_ejemplo_data %>% summarise(suma = rowSums(across(matches('d\\d_wins')))) %>% pull(suma),
    n = raton_ejemplo_data %>% pull(cant_intentos) * (raton_ejemplo_data %>% select(matches('d\\d_wins')) |> ncol())
)
```

Nuestro modelo tiene muchisima menos incerteza ahora.

```{r}
pbeta(0.5, 13, 19)
qbeta(c(0.025,0.975), 13, 19)
```

Nuestra intuicion cambio y ahora hay nada mas un 85% de chances de que este raton tiene una probabilidad de ganar menor al 50%. Tambien podemos calcular un intervalo de credibilidad del 95% sobre la probabilidad de ganar que esta entre 24% y 57%. 

En principio podemos repetir esta misma logica para cada uno de los ratones en nuestros datos.

```{r}
beta_individual <- dominancia_machos %>% group_by(cage) %>% mutate(cant_intentos = n() - 1) %>% group_by(dummy_id) %>%
  summarise(
    suma = rowSums(across(matches('d\\d_wins'))),
    n = cant_intentos*dominancia_machos %>% select(matches('d\\d_wins')) |> ncol(),
    geno = geno
  )

head(beta_individual)
```



```{r}
beta_individual <- beta_individual %>%
  mutate(
    posterior_alfa = 2 + suma,
    posterior_beta = 2 + n-suma
  )

head(beta_individual)
```

El resultado entonces es este. 

```{r}
pmap(beta_individual, 
     ~ data.frame(
       raton = ..1,
       geno = ..4,
       parametro = seq(0,1,0.01),
       densidad_posterior = dbeta(
       seq(0,1,0.01),..5, ..6
       )
     )
) %>% bind_rows() %>%
  ggplot(
    aes(x = parametro, y = densidad_posterior, color = geno, group = raton)
  ) +
  geom_line()
```

Significa que para cada raton tenemos una distribucion de probabilidad de la probabilidad de ganar un encuentro cualquiera. Podemos calcular la media, moda y mediana de estas distribuciones posteriores.

```{r}
beta_individual <- beta_individual %>%
  mutate(
    media = posterior_alfa/(posterior_alfa + posterior_beta),
    mediana = qbeta(0.5, posterior_alfa, posterior_beta), 
    moda = (posterior_alfa - 1)/(posterior_alfa+posterior_beta - 2)
  ) 

head(beta_individual)
```

Ahora podria comparar este numero con el que calculo de manera "frecuentista".

```{r}
combined_measures <- beta_individual %>% pivot_longer(cols = c(media,mediana,moda), names_to = 'medida', values_to = 'valor') %>%
right_join(
  dominancia_machos %>% select(dummy_id, wins_t_di),
  by = 'dummy_id'
)

combined_measures %>%
  ggplot(
    aes(x = valor, y = wins_t_di, color = medida)
  ) +
  geom_point(size = 2) +
  geom_abline(slope = 1, intercept = 0) +
  facet_wrap(~medida, nrow = 3)
```

```{r}
combined_measures %>% mutate(diferencia = wins_t_di - valor) %>%
  ggplot(
    aes(x = wins_t_di, y = diferencia)
  ) +
  geom_jitter(aes(color = diferencia)) +
  geom_hline(yintercept = 0) +
  scale_color_gradient2(low = 'blue', mid = 'grey', high = 'red', midpoint = 0)
```


```{r}
combined_measures %>% filter(medida == 'media') %>%
  ggplot(
    aes(x = geno, y = valor, fill = geno)
  ) +
  stat_summary(geom = 'bar') + 
  stat_summary(geom = 'errorbar', width = 0.3) +
  geom_point(position = position_jitter(width = 0.25))

combined_measures %>% filter(medida == 'media') %>% mutate(
  LL = qbeta(0.025, posterior_alfa, posterior_beta),
  UL = qbeta(0.975, posterior_alfa, posterior_beta)
) %>% ggplot(
    aes(x = geno, y = valor, fill = geno)
  ) +
  stat_summary(geom = 'bar') + 
  stat_summary(geom = 'errorbar', width = 0.3) +
  geom_pointrange(aes(ymin = LL, ymax = UL), position = position_jitter(width = 0.25), size = 0.3)
```


```{r}
testeo <- dominancia_machos %>% select(matches('d\\d_id'), dummy_id, geno) %>%
  pivot_longer(cols = matches('d\\d_id')) %>%
  mutate(
    value = ifelse(value > 0, value, value + 0.01),
    value = ifelse(value < 1, value, value - 0.01),
    dummy_id = factor(dummy_id)
  )

get_prior(
  value ~ (1|dummy_id),
  data = testeo,
  family = Beta()
)

testeo_beta <- brm(
  value ~ (1|dummy_id),
  data = testeo,
  family = Beta(),
  chains = 4, iter = 5000,
  cores = 4, seed = 1234
)
testeo_beta
broom.mixed::tidy(testeo_beta) %>% mutate(estimate = plogis(estimate))
broom.mixed::tidy(testeo_beta, effects = "fixed") %>% mutate(estimate = plogis(estimate))
broom.mixed::tidy(testeo_beta, effects = "ran_pars") %>% mutate(estimate = plogis(estimate))
broom.mixed::tidy(testeo_beta, effects = "ran_vals") %>% mutate(estimate = plogis(estimate))

testeo_beta2 <- brm(
  value ~ geno + (1|dummy_id),
  data = testeo,
  family = Beta(),
  chains = 4, iter = 10000,
  cores = 4, seed = 1234
)


```

